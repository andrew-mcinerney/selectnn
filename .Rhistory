Q = Q,
n_init = n_init
)
nn_hidden[[1]] <- hidden_node_sel1(
X = X,
y = y,
Q = nn_layers[[1]]$q,
n_init = n_init
)
nn_hidden[[1]]
nn_layers[[1]]
nn_layers[[1]] <- hidden_layer_sel(
X = X,
y = y,
Q = Q,
n_init = n_init
)
nn_layers[[1]]$q
nn_layers[[1]] <- hidden_layer_sel(
X = X,
y = y,
Q = Q,
n_init = n_init
)
nn_layers[[1]]$q
nn_layers <- vector(mode = "list", length = 1)
nn_hidden <- vector(mode = "list", length = 1)
nn_layers[[1]] <- hidden_layer_sel(
X = X,
y = y,
Q = Q,
n_init = n_init,
nn_fn = "neuralnet",
maxit = 10000
)
nn_layers[[1]]$q
nn_hidden[[1]] <- hidden_node_sel1(
X = X,
y = y,
Q = nn_layers[[1]]$q,
n_init = n_init,
nn_fn = "neuralnet",
maxit = 10000
)
nn_hidden[[1]]
n_params <- function (p, q) {
return(sum(c(p + 1, q + 1) * c(q, 1)))
}
n_params(p, 2)
n_params(p, c(2, 4))
nn_hidden[[1]] <- hidden_node_sel1(
X = X,
y = y,
Q = nn_layers[[1]]$q,
n_init = n_init,
nn_fn = "neuralnet",
maxit = 10000,
L = 2
)
nn_hidden[[1]] <- hidden_node_sel1(
X = X,
y = y,
Q = nn_layers[[1]]$q,
n_init = n_init,
nn_fn = "neuralnet",
maxit = 10000,
l = 2
)
nn_hidden[[1]]
nn_layers[[1]]$q
q_temp <- nn_layers[[1]]$q
l=2
q_temp[l] <- nn_hidden[[1]]$min
q_temp <- nn_layers[[1]]$q
for (l in length(nn_layers[[1]]$q):1) {
nn_hidden[[1]] <- hidden_node_sel1(
X = X,
y = y,
Q = q_temp,
n_init = n_init,
nn_fn = "neuralnet",
maxit = 10000,
l = l
)
q_temp[l] <- nn_hidden[[1]]$min
}
q_temp <- nn_layers[[1]]$q
for (l in length(nn_layers[[1]]$q):1) {
nn_hidden[[1]] <- hidden_node_sel1(
X = X,
y = y,
Q = q_temp,
n_init = n_init,
nn_fn = "neuralnet",
maxit = 10000,
l = l
)
q_temp[l] <- nn_hidden[[1]]$min
}
q_temp
Q <- rep(7, L)
nn_layers <- vector(mode = "list", length = 1)
nn_hidden <- vector(mode = "list", length = 1)
nn_layers[[1]] <- hidden_layer_sel(
X = X,
y = y,
Q = Q,
n_init = n_init,
nn_fn = "neuralnet",
maxit = 10000
)
q_temp <- nn_layers[[1]]$q
for (l in length(nn_layers[[1]]$q):1) {
nn_hidden[[1]] <- hidden_node_sel1(
X = X,
y = y,
Q = q_temp,
n_init = n_init,
nn_fn = "neuralnet",
maxit = 10000,
l = l
)
q_temp[l] <- nn_hidden[[1]]$min
}
q_temp
nn_layers <- vector(mode = "list", length = 1)
nn_hidden <- vector(mode = "list", length = 1)
nn_layers[[1]] <- hidden_layer_sel(
X = X,
y = y,
Q = Q,
n_init = n_init,
nn_fn = "neuralnet",
maxit = 10000
)
q_temp <- nn_layers[[1]]$q
for (l in length(nn_layers[[1]]$q):1) {
nn_hidden[[1]] <- hidden_node_sel1(
X = X,
y = y,
Q = q_temp,
n_init = n_init,
nn_fn = "neuralnet",
maxit = 10000,
l = l
)
q_temp[l] <- nn_hidden[[1]]$min
}
q_temp
n <- 1000
p <- 4
q <- c(3, 1)
n_init <- 5
k <- sum(c(p + 1, q + 1) * c(q, 1))
W <- nnic::my_runif(k, 5, 2)
X <- matrix(rnorm(n * p), nrow = n)
y <- nn_pred(X, W, q)
L <- 3
Q <- rep(7, L)
h <- hidden_layer_sel(X, y, Q, n_init = n_init, nn_fn = "neuralnet", maxit = 10000)
h$min
sum((nn_pred(X, h$weights_min[[1]], Q[1]) - y)^2)
sum((nn_pred(X, h$weights_min[[2]], Q[1:2]) - y)^2)
sum((nn_pred(X, h$weights_min[[3]], Q[1:3]) - y)^2)
h$inf_crit_vec
# test --------------------------------------------------------------------
nn_layers <- vector(mode = "list", length = 1)
nn_hidden <- vector(mode = "list", length = 1)
nn_layers[[1]] <- hidden_layer_sel(
X = X,
y = y,
Q = Q,
n_init = n_init,
nn_fn = "neuralnet",
maxit = 10000
)
q_temp <- nn_layers[[1]]$q
for (l in length(nn_layers[[1]]$q):1) {
nn_hidden[[1]] <- hidden_node_sel1(
X = X,
y = y,
Q = q_temp,
n_init = n_init,
nn_fn = "neuralnet",
maxit = 10000,
l = l
)
q_temp[l] <- nn_hidden[[1]]$min
}
q_temp
nn_layers[[1]]
nn_hidden[[1]]
n <- 1000
p <- 4
q <- c(3, 1)
n_init <- 5
k <- sum(c(p + 1, q + 1) * c(q, 1))
W <- nnic::my_runif(k, 5, 2)
X <- matrix(rnorm(n * p), nrow = n)
y <- nn_pred(X, W, q)
L <- 3
Q <- rep(7, L)
h <- hidden_layer_sel(X, y, Q, n_init = n_init, nn_fn = "neuralnet", maxit = 10000)
h$min
sum((nn_pred(X, h$weights_min[[1]], Q[1]) - y)^2)
sum((nn_pred(X, h$weights_min[[2]], Q[1:2]) - y)^2)
sum((nn_pred(X, h$weights_min[[3]], Q[1:3]) - y)^2)
h$inf_crit_vec
# test --------------------------------------------------------------------
nn_layers <- vector(mode = "list", length = 1)
nn_hidden <- vector(mode = "list", length = 1)
nn_layers[[1]] <- hidden_layer_sel(
X = X,
y = y,
Q = Q,
n_init = n_init,
nn_fn = "neuralnet",
maxit = 10000
)
q_temp <- nn_layers[[1]]$q
for (l in length(nn_layers[[1]]$q):1) {
nn_hidden[[1]] <- hidden_node_sel1(
X = X,
y = y,
Q = q_temp,
n_init = n_init,
nn_fn = "neuralnet",
maxit = 10000,
l = l
)
q_temp[l] <- nn_hidden[[1]]$min
}
q_temp
nn_layers[[1]]
nn_hidden[[1]]
n <- 1000
p <- 4
q <- c(3, 1)
n_init <- 5
k <- sum(c(p + 1, q + 1) * c(q, 1))
W <- nnic::my_runif(k, 3, 2)
X <- matrix(rnorm(n * p), nrow = n)
y <- nn_pred(X, W, q)
L <- 3
Q <- rep(7, L)
h <- hidden_layer_sel(X, y, Q, n_init = n_init, nn_fn = "neuralnet", maxit = 10000)
h$min
sum((nn_pred(X, h$weights_min[[1]], Q[1]) - y)^2)
sum((nn_pred(X, h$weights_min[[2]], Q[1:2]) - y)^2)
sum((nn_pred(X, h$weights_min[[3]], Q[1:3]) - y)^2)
h$inf_crit_vec
# test --------------------------------------------------------------------
nn_layers <- vector(mode = "list", length = 1)
nn_hidden <- vector(mode = "list", length = 1)
nn_layers[[1]] <- hidden_layer_sel(
X = X,
y = y,
Q = Q,
n_init = n_init,
nn_fn = "neuralnet",
maxit = 10000
)
q_temp <- nn_layers[[1]]$q
for (l in length(nn_layers[[1]]$q):1) {
nn_hidden[[1]] <- hidden_node_sel1(
X = X,
y = y,
Q = q_temp,
n_init = n_init,
nn_fn = "neuralnet",
maxit = 10000,
l = l
)
q_temp[l] <- nn_hidden[[1]]$min
}
q_temp
nn_layers[[1]]
nn_hidden[[1]]
n <- 1000
p <- 4
q <- c(3, 1)
n_init <- 5
maxit <- 100000
k <- sum(c(p + 1, q + 1) * c(q, 1))
W <- nnic::my_runif(k, 3, 2)
X <- matrix(rnorm(n * p), nrow = n)
y <- nn_pred(X, W, q)
L <- 3
Q <- rep(7, L)
h <- hidden_layer_sel(X, y, Q, n_init = n_init, nn_fn = "neuralnet", maxit = maxit)
h$min
sum((nn_pred(X, h$weights_min[[1]], Q[1]) - y)^2)
sum((nn_pred(X, h$weights_min[[2]], Q[1:2]) - y)^2)
sum((nn_pred(X, h$weights_min[[3]], Q[1:3]) - y)^2)
h$inf_crit_vec
# test --------------------------------------------------------------------
nn_layers <- vector(mode = "list", length = 1)
nn_hidden <- vector(mode = "list", length = 1)
nn_layers[[1]] <- hidden_layer_sel(
X = X,
y = y,
Q = Q,
n_init = n_init,
nn_fn = "neuralnet",
maxit = maxit
)
q_temp <- nn_layers[[1]]$q
for (l in length(nn_layers[[1]]$q):1) {
nn_hidden[[1]] <- hidden_node_sel1(
X = X,
y = y,
Q = q_temp,
n_init = n_init,
nn_fn = "neuralnet",
maxit = maxit,
l = l
)
q_temp[l] <- nn_hidden[[1]]$min
}
q_temp
nn_layers[[1]]
nn_hidden[[1]]
devtools::load_all()
n <- 1000
p <- 4
q <- c(3, 1)
n_init <- 5
maxit <- 100000
k <- sum(c(p + 1, q + 1) * c(q, 1))
W <- nnic::my_runif(k, 3, 2)
X <- matrix(rnorm(n * p), nrow = n)
y <- nn_pred(X, W, q)
L <- 3
Q <- rep(7, L)
h <- hidden_layer_sel(X, y, Q, n_init = n_init, nn_fn = "neuralnet", maxit = maxit)
h$min
sum((nn_pred(X, h$weights_min[[1]], Q[1]) - y)^2)
sum((nn_pred(X, h$weights_min[[2]], Q[1:2]) - y)^2)
sum((nn_pred(X, h$weights_min[[3]], Q[1:3]) - y)^2)
h$inf_crit_vec
hidden_layer_sel <- function(X, y, Q, n_init, L = 1, type = "bulk", inf_crit = "BIC",
task = "regression", unif = 3, maxit = 1000, ...) {
if ((length(Q) > 1) & (L == 1)) {
L <- length(Q)
} else if ((length(Q) == 1) & (L > 1)) {
Q <- rep(Q, times = L)
} else if (length(Q) != L){
stop("Error: Q and L do not agree")
}
if (type == "bulk") {
inf_crit_vec <- rep(NA, L)
names(inf_crit_vec) <- as.character(1:L)
weights_min <- vector("list", length = L)
for (l in 1:L) {
q <- Q[1:l]
nn <- nn_fit_tracks(X, y, q, n_init, inf_crit, task, unif,
maxit = maxit, ...
)
weights_min[[l]] <- nn$W_opt
inf_crit_vec[l] <- nn$value
}
W_opt <- weights_min[[which.min(inf_crit_vec)]]
} else if (type == "step") {
n_candidates <- 3
inf_crit_vec <- rep(NA, n_candidates)
names(inf_crit_vec) <- as.character((Q - 1):(Q + 1))
n <- nrow(X) # sample size
p <- ncol(X) # number of covariates
weights_min <- vector(mode = "list", length = n_candidates)
names(weights_min) <- as.character((Q - 1):(Q + 1))
for (q in (Q - 1):(Q + 1)) {
if (q == 0) {
weights_min[[as.character(q)]] <- NULL
inf_crit_vec[as.character(q)] <- NA
} else {
k <- (p + 1) * q + (q + 1)
nn <- nn_fit_tracks(X, y, q, n_init, inf_crit, task, unif,
maxit = maxit, ...
)
weights_min[[as.character(q)]] <- nn$W_opt
inf_crit_vec[as.character(q)] <- nn$value
}
}
W_opt <- weights_min[[names(which.min(inf_crit_vec))]]
}
return(list(
"min" = as.numeric(names(which.min(inf_crit_vec))),
"q" = Q[1:as.numeric(names(which.min(inf_crit_vec)))],
"value" = min(inf_crit_vec, na.rm = TRUE),
"inf_crit_vec" = inf_crit_vec,
"weights_min" = weights_min,
"W_opt" = W_opt
))
}
n <- 1000
p <- 4
q <- c(3, 1)
n_init <- 5
maxit <- 100000
k <- sum(c(p + 1, q + 1) * c(q, 1))
W <- nnic::my_runif(k, 3, 2)
X <- matrix(rnorm(n * p), nrow = n)
y <- nn_pred(X, W, q)
L <- 3
Q <- rep(7, L)
h <- hidden_layer_sel(X, y, Q, n_init = n_init, nn_fn = "neuralnet", maxit = maxit)
h$min
sum((nn_pred(X, h$weights_min[[1]], Q[1]) - y)^2)
sum((nn_pred(X, h$weights_min[[2]], Q[1:2]) - y)^2)
sum((nn_pred(X, h$weights_min[[3]], Q[1:3]) - y)^2)
h$inf_crit_vec
nn_layers <- vector(mode = "list", length = 1)
nn_hidden <- vector(mode = "list", length = 1)
nn_layers[[1]] <- hidden_layer_sel(
X = X,
y = y,
Q = Q,
n_init = n_init,
nn_fn = "neuralnet",
maxit = maxit
)
q_temp <- nn_layers[[1]]$q
for (l in length(nn_layers[[1]]$q):1) {
nn_hidden[[1]] <- hidden_node_sel1(
X = X,
y = y,
Q = q_temp,
n_init = n_init,
nn_fn = "neuralnet",
maxit = maxit,
l = l
)
q_temp[l] <- nn_hidden[[1]]$min
}
q_temp
nn_layers[[1]]
nn_hidden[[1]]
hidden_node_sel1 <- function(X, y, Q, n_init, l = 1, type = "bulk", inf_crit = "BIC",
task = "regression", unif = 3, maxit = 1000, ...) {
if (type == "bulk") {
inf_crit_vec <- rep(NA, Q[l])
names(inf_crit_vec) <- as.character(1:Q[l])
weights_min <- vector("list", length = Q[l])
for (q in 1:Q[l]) {
q_current <- Q
q_current[l] <- q
nn <- nn_fit_tracks(X, y, q_current, n_init, inf_crit, task, unif,
maxit = maxit, ...
)
weights_min[[q]] <- nn$W_opt
inf_crit_vec[q] <- nn$value
}
W_opt <- weights_min[[which.min(inf_crit_vec)]]
} else if (type == "step") {
n_candidates <- 3
inf_crit_vec <- rep(NA, n_candidates)
names(inf_crit_vec) <- as.character((Q - 1):(Q + 1))
n <- nrow(X) # sample size
p <- ncol(X) # number of covariates
weights_min <- vector(mode = "list", length = n_candidates)
names(weights_min) <- as.character((Q - 1):(Q + 1))
for (q in (Q - 1):(Q + 1)) {
if (q == 0) {
weights_min[[as.character(q)]] <- NULL
inf_crit_vec[as.character(q)] <- NA
} else {
k <- (p + 1) * q + (q + 1)
nn <- nn_fit_tracks(X, y, q, n_init, inf_crit, task, unif,
maxit = maxit, ...
)
weights_min[[as.character(q)]] <- nn$W_opt
inf_crit_vec[as.character(q)] <- nn$value
}
}
W_opt <- weights_min[[names(which.min(inf_crit_vec))]]
}
return(list(
"min" = as.numeric(names(which.min(inf_crit_vec))),
"value" = min(inf_crit_vec, na.rm = TRUE),
"inf_crit_vec" = inf_crit_vec,
"weights_min" = weights_min,
"W_opt" = W_opt
))
}
for (l in length(nn_layers[[1]]$q):1) {
nn_hidden[[1]] <- hidden_node_sel1(
X = X,
y = y,
Q = q_temp,
n_init = n_init,
nn_fn = "neuralnet",
maxit = maxit,
l = l
)
q_temp[l] <- nn_hidden[[1]]$min
}
q_temp
nn_layers[[1]]
nn_hidden[[1]]
q_temp
neural_model <- neuralnet::neuralnet(y ~ ., data = data.frame(X, y), hidden = Q,
err.fct = "sse", act.fct = "logistic",
linear.output = TRUE, startweights = W)
statnn::statnn(neural_model)
# Run once to configure your package to use pkgdown
usethis::use_pkgdown()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site_github_pages()
devtools::check()
devtools::check()
pkgdown::build_site_github_pages()
